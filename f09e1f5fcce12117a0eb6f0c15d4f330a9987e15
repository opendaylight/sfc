{
  "comments": [
    {
      "key": {
        "uuid": "7a6b29fe_df1bd7c8",
        "filename": "sfc-genius/src/main/java/org/opendaylight/sfc/genius/util/SfcGeniusRpcClient.java",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 2039
      },
      "writtenOn": "2016-10-04T12:36:43Z",
      "side": 1,
      "message": "YAS??? Yet Another Singleton?? Will this class be called from several different classes? If not, maybe the attributes stored here could be stored elsewhere and this class could just be static instead of a singleton.",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 31
      },
      "revId": "f09e1f5fcce12117a0eb6f0c15d4f330a9987e15",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_1f7d4fe8",
        "filename": "sfc-genius/src/main/java/org/opendaylight/sfc/genius/util/SfcGeniusRpcClient.java",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 2039
      },
      "writtenOn": "2016-10-04T12:36:43Z",
      "side": 1,
      "message": "if we decide to keep this class as a Singleton, should this method be synchronized?",
      "range": {
        "startLine": 51,
        "startChar": 37,
        "endLine": 51,
        "endChar": 48
      },
      "revId": "f09e1f5fcce12117a0eb6f0c15d4f330a9987e15",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_3f5f6b77",
        "filename": "sfc-genius/src/main/java/org/opendaylight/sfc/genius/util/SfcGeniusRpcClient.java",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 2039
      },
      "writtenOn": "2016-10-04T12:36:43Z",
      "side": 1,
      "message": "when is this method called? How does a user of this class know if the method should be called or not? Do they need to always call getInstance() and initialize()?? Why not just call this method from getInstance() when the object is instantiated, and make this method private?",
      "range": {
        "startLine": 60,
        "startChar": 16,
        "endLine": 60,
        "endChar": 26
      },
      "revId": "f09e1f5fcce12117a0eb6f0c15d4f330a9987e15",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_4adc2319",
        "filename": "sfc-renderers/sfc-openflow-renderer/src/main/java/org/opendaylight/sfc/ofrenderer/openflow/SfcOfFlowProgrammerImpl.java",
        "patchSetId": 4
      },
      "lineNbr": 1255,
      "author": {
        "id": 2039
      },
      "writtenOn": "2016-10-04T12:36:43Z",
      "side": 1,
      "message": "This isnt necessary, since it will be done in configureTransportEgressFlow(). You should just pass TRANSPORT_EGRESS_NSH_ETH_LASTHOP_COOKIE.\n\nI just realized you\u0027re not calling configureTransportEgressFlow()... should we so we can remove duplicate code??",
      "range": {
        "startLine": 1255,
        "startChar": 0,
        "endLine": 1255,
        "endChar": 111
      },
      "revId": "f09e1f5fcce12117a0eb6f0c15d4f330a9987e15",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6b29fe_cacf9356",
        "filename": "sfc-renderers/sfc-openflow-renderer/src/main/java/org/opendaylight/sfc/ofrenderer/openflow/SfcOfFlowProgrammerInterface.java",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 2039
      },
      "writtenOn": "2016-10-04T12:36:43Z",
      "side": 1,
      "message": "I thought these were internal methods in SfcOfFlowProgrammerImpl.java, so they shouldnt be here.",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 187,
        "endChar": 70
      },
      "revId": "f09e1f5fcce12117a0eb6f0c15d4f330a9987e15",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}