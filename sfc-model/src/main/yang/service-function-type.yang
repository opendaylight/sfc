module service-function-type {

  namespace "urn:cisco:params:xml:ns:yang:sfc-sft";

  prefix sfc-sft;

  import service-locator {
      prefix sfc-sl;
      }

  import sfc-common {
      prefix sfc-common;
  }

  organization "Cisco Systems, Inc.";
  contact "Reinaldo Penno <repenno@cisco.com>";

  description
    "This module contains a collection of YANG definitions for
     managing service function types.

     It follows closely the constructs of
     http://tools.ietf.org/html/draft-ietf-netmod-interfaces-cfg-12

     Copyright (c) 2013 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

     // RFC Ed.: replace XXXX with actual RFC number and remove this
     // note.

     // RFC Ed.: update the date below with the date of RFC
     // publication and remove this note.

  revision 2014-07-01 {
    description
      "Changes based on Opendaylight Testing.";
    reference "https://tools.ietf.org/html/draft-penno-sfc-yang";
  }


  // Service Function

  // Service Function Type definitions

  identity service-function-type-identity {
    description
      "Base identity from which specific service function
       types are derived.";
  }

  identity firewall {
    base "service-function-type-identity";
    description "Firewall";
  }

  identity dpi {
    base "service-function-type-identity";
    description "Deep Packet Inspection";
  }

  identity napt44 {
    base "service-function-type-identity";
    description "Network Address and Port Translation 44";
  }

  identity qos {
    base "service-function-type-identity";
    description "Quality of Service";
  }

  identity ids {
    base "service-function-type-identity";
    description "Intrusion Detection System";
  }

  identity http-header-enrichment {
    base "service-function-type-identity";
    description
      "HTTP services that add HTTP headers for charging and adding
       subscriber metadata";
  }

  identity tcp-proxy {
    base "service-function-type-identity";
    description "A TCP Proxy sets up a connection with the
                 client and another one with the server.";
  }
  identity Cisco-vASA {
    base "service-function-type-identity";
    description "Cisco vASA";
  }

  identity Cisco-vNBAR {
    base "service-function-type-identity";
    description "Cisco vNBAR";
  }

  typedef service-function-type {
    type identityref {
      base "service-function-type-identity";
    }
    description "This type is used to reference all
      registered service function types";
  }

  // Service Function Type definitions

  grouping service-function-type-definition {
    description
      "List of parameters to define an abstract type of Service Function";
    //TODO: Expand list to include metadata context template support. ie MD Type1 C3/C4 context, MD Type2 etc.

    leaf type {
      type sfc-common:sft-type;
      description "Service Function type names such as firewall, dpi, tcp-proxy, etc";
    }

    leaf symmetry {
      type boolean;
      description "SF is involved in a symmetric service path";
    }

    leaf bidirectionality {
      type boolean;
      description "SF handles uplink and downlink traffic";
    }

    leaf nsh-aware {
      type boolean;
      description "Service Function can handle Network Service Headers";
    }
    leaf request-reclassification {
        type boolean;
        description "This leaf determines whether SF can request
          reclassification by the SFF";
      }
    list supported-dataplanelocator-types {
      description "Data Plane Locator types from the Service Function";
      key "dataplanelocator-type";
      leaf dataplanelocator-type {
          type sfc-sl:sl-transport-type-def;
      }
    }
  }

  container service-function-types {
    description
      "A list of Service function Types. For each type we keep
       a list of Service Functions";

    list service-function-type {
      key "type";
      leaf type {
        type service-function-type;
        description
            "The service function type";
      }
      list sft-service-function-name {
        //TODO: should this be sf-name typedef? Also this should be kept in a separate map as an alternate index as it mirrors state.
        key "name";
        leaf name {
          type string;
          description
            "The name of the service function.";
        }
        description
          "The list of all service functions of a specific type";
      }
      description
        "A list of all service types. Each service-type entry holds
         a list of all service functions of the type";
    }
  }
}
