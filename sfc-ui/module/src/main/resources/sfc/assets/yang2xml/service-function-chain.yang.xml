<?xml version="1.0" encoding="UTF-8"?>
<module name="service-function-chain"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:sfc-sfc="urn:cisco:params:xml:ns:yang:sfc-sfc"
        xmlns:sfc-sft="urn:cisco:params:xml:ns:yang:sfc-sft"
        xmlns:sfc-common="urn:cisco:params:xml:ns:yang:sfc-common">
  <namespace uri="urn:cisco:params:xml:ns:yang:sfc-sfc"/>
  <prefix value="sfc-sfc"/>
  <import module="service-function-type">
    <prefix value="sfc-sft"/>
    <revision-date date="2014-07-01"/>
  </import>
  <import module="sfc-common">
    <prefix value="sfc-common"/>
    <revision-date date="2015-10-17"/>
  </import>
  <organization>
    <text>Cisco Systems, Inc.</text>
  </organization>
  <contact>
    <text>Reinaldo Penno &lt;repenno@cisco.com&gt;</text>
  </contact>
  <description>
    <text>This module contains a collection of YANG definitions for
managing service function chains.

Copyright (c) 2013 IETF Trust and the persons identified as
authors of the code.  All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, is permitted pursuant to, and subject
to the license terms contained in, the Simplified BSD License
set forth in Section 4.c of the IETF Trust's Legal Provisions
Relating to IETF Documents
(http://trustee.ietf.org/license-info).

This version of this YANG module is part of RFC XXXX; see
the RFC itself for full legal notices.</text>
  </description>
  <revision date="2014-07-01">
    <description>
      <text>Revised based on Opendaylight Project feedback</text>
    </description>
    <reference>
      <text>https://tools.ietf.org/html/draft-penno-sfc-yang</text>
    </reference>
  </revision>
  <grouping name="service-function-chain-grouping">
    <list name="service-function-chain">
      <key value="name"/>
      <description>
        <text>A list that holds all service function chains in the
domain</text>
      </description>
      <leaf name="name">
        <type name="sfc-common:sfc-name"/>
        <description>
          <text>the name of the service function chain</text>
        </description>
      </leaf>
      <leaf name="symmetric">
        <type name="boolean"/>
        <default value="false"/>
        <description>
          <text>If the chain is symmetric we will create two service
paths, one ingress and another egress. Packets traverse
the egress service path in the reverse order of the
ingress path</text>
        </description>
      </leaf>
      <list name="sfc-service-function">
        <key value="name"/>
        <leaf name="name">
          <type name="string"/>
          <description>
            <text>A unique handle that describes the service function
that will be chosen for this type, such as
ingress-dpi. This is not the service function name</text>
          </description>
        </leaf>
        <leaf name="type">
          <type name="sfc-sft:service-function-type"/>
          <mandatory value="true"/>
          <description>
            <text>Service Function Type from service-function-type.yang</text>
          </description>
        </leaf>
        <leaf name="order">
          <type name="uint8"/>
          <description>
            <text>A number that denotes the order of a service function
type in a chain</text>
          </description>
        </leaf>
        <ordered-by value="user"/>
        <description>
          <text>A list of service functions that compose the service
chain</text>
        </description>
      </list>
    </list>
    <description>
      <text>This group bundles together all service function chains in the
domain</text>
    </description>
  </grouping>
  <container name="service-function-chains">
    <uses name="service-function-chain-grouping"/>
    <description>
      <text>A service Function chain defines an
abstract set of service functions and their ordering
constraints that must be applied to packets and/or frames
selected as a result of classification.  The implied order
may not be a linear progression as the architecture allows
for nodes that copy to more than one branch, and also allows
for cases where there is flexibility in the order in which
services need to be applied. The term service chain is often
used as shorthand for service function chain.</text>
    </description>
  </container>
  <container name="service-function-chains-state">
    <config value="false"/>
    <list name="service-function-chain-state">
      <key value="name"/>
      <description>
        <text>A list that contains operational service function
chain state</text>
      </description>
      <leaf name="name">
        <type name="sfc-common:sfc-name"/>
        <description>
          <text>the name of the service function chain</text>
        </description>
      </leaf>
      <list name="sfc-service-path">
        <key value="name"/>
        <leaf name="name">
          <type name="sfc-common:sfp-name"/>
          <description>
            <text>The name of the Service Path</text>
          </description>
        </leaf>
        <description>
          <text>A list of all service function paths instantiated from
this chain</text>
        </description>
      </list>
    </list>
    <description>
      <text>This containers holds operational service function
 chain state and their associated service path</text>
    </description>
  </container>
  <rpc name="instantiate-service-function-chain">
    <description>
      <text>Instantiates a single service function</text>
    </description>
    <input>
      <leaf name="name">
        <type name="string"/>
        <mandatory value="true"/>
        <description>
          <text>The name of the service function chain to be
instantiated.</text>
        </description>
      </leaf>
    </input>
    <output>
      <leaf name="name">
        <type name="string"/>
        <description>
          <text>The name of the created service function path.</text>
        </description>
      </leaf>
    </output>
  </rpc>
  <rpc name="put-service-function-chains">
    <description>
      <text>Creates Service-Functions</text>
    </description>
    <input>
      <uses name="service-function-chain-grouping"/>
    </input>
  </rpc>
</module>
