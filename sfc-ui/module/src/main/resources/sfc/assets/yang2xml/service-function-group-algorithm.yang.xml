<?xml version="1.0" encoding="UTF-8"?>
<module name="service-function-group-algorithm"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:sfc-sfg-alg="urn:cisco:params:xml:ns:yang:sfc-sfg-alg"
        xmlns:inet="urn:ietf:params:xml:ns:yang:ietf-inet-types"
        xmlns:yang="urn:ietf:params:xml:ns:yang:ietf-yang-types">
  <namespace uri="urn:cisco:params:xml:ns:yang:sfc-sfg-alg"/>
  <prefix value="sfc-sfg-alg"/>
  <import module="ietf-inet-types">
    <prefix value="inet"/>
  </import>
  <import module="ietf-yang-types">
    <prefix value="yang"/>
  </import>
  <organization>
    <text>Contextream, Inc.</text>
  </organization>
  <contact>
    <text>Kfir Yeshayahu &lt;kfir.yeshayahu@contextream.com&gt;</text>
  </contact>
  <description>
    <text>This module contains a collection of YANG definitions for
managing service function group algorithms.

Copyright (c) 2013 IETF Trust and the persons identified as
authors of the code.  All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, is permitted pursuant to, and subject
to the license terms contained in, the Simplified BSD License
set forth in Section 4.c of the IETF Trust's Legal Provisions
Relating to IETF Documents
(http://trustee.ietf.org/license-info).

This version of this YANG module is part of RFC XXXX; see
the RFC itself for full legal notices.</text>
  </description>
  <revision date="2015-02-14">
    <description>
      <text>Revised based on SFF Load Balance Feature Proposal</text>
    </description>
  </revision>
  <grouping name="service-function-group-algorithm-entry">
    <description>
      <text>A list that holds all service function group algorithms in the domain</text>
    </description>
    <leaf name="name">
      <type name="string"/>
      <description>
        <text>The name of the service function group algorithm</text>
      </description>
    </leaf>
    <leaf name="algorithm_type">
      <type name="enumeration">
        <enum name="ALL">
          <value value="0"/>
          <description>
            <text>Execute all buckets in the group. This group is used for multicast or broadcast
forwarding. The packet is effectively cloned for each bucket; one packet is processed for each
bucket of the group. If a bucket directs a packet explicitly out the ingress port, this packet clone
is dropped. If the controller writer wants to forward out the ingress port, the group must include
an extra bucket which includes an output action to the OFPP_IN_PORT reserved port</text>
          </description>
        </enum>
        <enum name="SELECT">
          <value value="1"/>
          <description>
            <text>Execute one bucket in the group. Packets are processed by a single bucket in
the group, based on a switch-computed selection algorithm (e.g. hash on some user-configured
tuple or simple round robin). All configuration and state for the selection algorithm is external
to OpenFlow. The selection algorithm should implement equal load sharing and can optionally
be based on bucket weights. When a port specified in a bucket in a select group goes down, the
switch may restrict bucket selection to the remaining set (those with forwarding actions to live
ports) instead of dropping packets destined to that port. This behavior may reduce the disruption
of a downed link or switch</text>
          </description>
        </enum>
        <enum name="INDIRECT">
          <value value="2"/>
          <description>
            <text>Execute the one defined bucket in this group. This group supports only
a single bucket. Allows multiple flow entries or groups to point to a common group identifier,
supporting faster, more efficient convergence (e.g. next hops for IP forwarding). This group type
is effectively identical to an all group with one bucket</text>
          </description>
        </enum>
        <enum name="FAST_FAILURE">
          <value value="3"/>
          <description>
            <text>Execute the first live bucket. Each action bucket is associated with
a specific port and/or group that controls its liveness. The buckets are evaluated in the order
defined by the group, and the first bucket which is associated with a live port/group is selected.
This group type enables the switch to change forwarding without requiring a round trip to the
controller. If no buckets are live, packets are dropped.</text>
          </description>
        </enum>
      </type>
    </leaf>
  </grouping>
  <typedef name="service-function-group-algorithm-ref">
    <type name="leafref">
      <path value="/sfc-sfg-alg:service-function-group-algorithms/sfc-sfg-alg:service-function-group-algorithm/sfc-sfg-alg:name"/>
    </type>
    <description>
      <text>This type is used by data models that need to reference
configured service functions.</text>
    </description>
  </typedef>
  <container name="service-function-group-algorithms">
    <description>
      <text>All service function group algorithms</text>
    </description>
    <list name="service-function-group-algorithm">
      <description>
        <text>This list holds configuration data for all service function group algorithms
in the domain</text>
      </description>
      <key value="name"/>
      <uses name="service-function-group-algorithm-entry"/>
    </list>
  </container>
</module>
