<?xml version="1.0" encoding="UTF-8"?>
<module name="service-function"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:sfc-sf="urn:cisco:params:xml:ns:yang:sfc-sf"
        xmlns:inet="urn:ietf:params:xml:ns:yang:ietf-inet-types"
        xmlns:yang="urn:ietf:params:xml:ns:yang:ietf-yang-types">
  <namespace uri="urn:cisco:params:xml:ns:yang:sfc-sf"/>
  <prefix value="sfc-sf"/>
  <import module="ietf-inet-types">
    <prefix value="inet"/>
  </import>
  <import module="ietf-yang-types">
    <prefix value="yang"/>
  </import>
  <import module="service-function-type">
    <prefix value="sfc-sft"/>
  </import>
  <import module="service-locator">
    <prefix value="sfc-sl"/>
  </import>
  <organization>
    <text>Cisco Systems, Inc.</text>
  </organization>
  <contact>
    <text>Reinaldo Penno &lt;repenno@cisco.com&gt;</text>
  </contact>
  <description>
    <text>This module contains a collection of YANG definitions for
managing service function.

It follows closely the constructs of
http://tools.ietf.org/html/draft-ietf-netmod-interfaces-cfg-12

Copyright (c) 2013 IETF Trust and the persons identified as
authors of the code.  All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, is permitted pursuant to, and subject
to the license terms contained in, the Simplified BSD License
set forth in Section 4.c of the IETF Trust's Legal Provisions
Relating to IETF Documents
(http://trustee.ietf.org/license-info).

This version of this YANG module is part of RFC XXXX; see
the RFC itself for full legal notices.</text>
  </description>
  <revision date="2014-07-01">
    <description>
      <text>Changes based on Opendaylight Testing.</text>
    </description>
  </revision>
  <typedef name="service-function-ref">
    <type name="leafref">
      <path value="/sfc-sf:service-functions/sfc-sf:service-function/sfc-sf:name"/>
    </type>
    <description>
      <text>This type is used by data models that need to reference
configured service functions.</text>
    </description>
  </typedef>
  <grouping name="service-function-entry">
    <description>
      <text>This group bundles together all information related to a
single service function</text>
    </description>
    <leaf name="name">
      <type name="string"/>
      <description>
        <text>The name of the service function.</text>
      </description>
    </leaf>
    <leaf name="type">
      <type name="sfc-sft:service-function-type"/>
      <mandatory value="true"/>
      <description>
        <text>Service Function Type from service-function-type yang
model</text>
      </description>
    </leaf>
    <leaf name="rest-uri">
      <description>
        <text>URI of REST based management</text>
      </description>
      <type name="inet:uri"/>
    </leaf>
    <leaf name="ip-mgmt-address">
      <type name="inet:ip-address"/>
      <description>
        <text>The IP and port used to configure this service-function</text>
      </description>
    </leaf>
    <leaf name="nsh-aware">
      <type name="boolean"/>
      <description>
        <text>Whether this SF can process NSH headers</text>
      </description>
    </leaf>
    <list name="sf-data-plane-locator">
      <description>
        <text>A network data-plane locator</text>
      </description>
      <key value="name"/>
      <leaf name="name">
        <type name="string"/>
        <description>
          <text>A unique string that represents this
data-plane-locator</text>
        </description>
      </leaf>
      <uses name="sfc-sl:data-plane-locator"/>
      <leaf name="service-function-forwarder">
        <type name="string"/>
        <description>
          <text>The service function forwarder associated with this
locator</text>
        </description>
      </leaf>
    </list>
  </grouping>
  <container name="service-functions">
    <description>
      <text>A function that is responsible for specific
treatment of received packets.  A Service Function can act at
various layers of a protocol stack (e.g., at the network layer
or other OSI layers).  A Service Function can be a virtual
element or be embedded in a physical network element.  One of
multiple Service Functions can be embedded in the same network
element.  Multiple occurrences of the Service Function can be
enabled in the same administrative domain.

One or more Service Functions can be involved in the delivery
of added-value services.  A non-exhaustive list of Service
Functions includes: firewalls, WAN and application
acceleration, Deep Packet Inspection (DPI),a LI (Lawful
Intercept) module, server load balancers, NAT44 [RFC3022],
NAT64 [RFC6146], NPTv6 [RFC6296], HOST_ID injection, HTTP
Header Enrichment functions, TCP optimizer, etc.

An SF may be SFC encapsulation aware, that is it receives, and
acts on information in the SFC encapsulation, or unaware in
which case data forwarded to the service does not contain the
SFC encapsulation.</text>
    </description>
    <list name="service-function">
      <description>
        <text>This list holds configuration data for all service functions
in the domain</text>
      </description>
      <key value="name"/>
      <uses name="service-function-entry"/>
    </list>
  </container>
  <container name="service-functions-state">
    <description>
      <text>This container hold operational state for all service
functions</text>
    </description>
    <config value="false"/>
    <list name="service-function-state">
      <description>
        <text>This list holds operational data for all service functions
in the domain</text>
      </description>
      <key value="name"/>
      <leaf name="name">
        <type name="string"/>
        <description>
          <text>the name of the service function</text>
        </description>
      </leaf>
      <list name="sf-service-path">
        <key value="name"/>
        <leaf name="name">
          <type name="string"/>
          <description>
            <text>The name of the Service Path</text>
          </description>
        </leaf>
        <description>
          <text>A list of all service function paths that contain this
service function</text>
        </description>
      </list>
    </list>
  </container>
  <rpc name="delete-all-service-function">
    <description>
      <text>Deletes all service functions</text>
    </description>
  </rpc>
  <rpc name="put-service-function">
    <description>
      <text>Creates a service function</text>
    </description>
    <input>
      <uses name="service-function-entry"/>
    </input>
  </rpc>
  <rpc name="read-service-function">
    <description>
      <text>Reads a service function</text>
    </description>
    <input>
      <leaf name="name">
        <type name="string"/>
        <mandatory value="true"/>
        <description>
          <text>The name of the service function.</text>
        </description>
      </leaf>
    </input>
    <output>
      <uses name="service-function-entry"/>
    </output>
  </rpc>
  <rpc name="delete-service-function">
    <description>
      <text>Deletes a service function</text>
    </description>
    <input>
      <leaf name="name">
        <type name="string"/>
        <mandatory value="true"/>
        <description>
          <text>The name of the service function.</text>
        </description>
      </leaf>
    </input>
  </rpc>
</module>
